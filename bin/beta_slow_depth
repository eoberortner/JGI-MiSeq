#!/usr/bin/env perl 
#
# wrapper to generate depth files and whatever else is done with them
#  dumping the depth file is the slow part probably
#
BEGIN {    # is our stuff around?
	my $gt_module = 'GT';
	eval "use $gt_module";
	if ($@) {
		print STDERR "\nERROR: ensure GT is installed\n\n";
		exit;
	}
}
use Modern::Perl;
use Getopt::Long;
use File::Basename;
use GT::Clutils;
use GT::Config;
use GT::Reseq::Utils;

# workaround for [SU]GE bug + gpfs bug that keeps us from using -V, not that I liked -V to begin with
# anyhow, have to explicitly path anything that's not autoloaded

#my $bin_dir = '/jgi/tools/groups/gentech/phoebetest/bin';

my $time     = '09:00:00';
my $base_dir = 'bwa_dir';

my ( $sge_project, $config_file, $help );

GetOptions(
	'time=s' => \$time,
	'base=s' => \$base_dir,
	'P=s'    => \$sge_project,
	'help'   => \$help,
	'config=s'  => \$config_file,
);

sub usage {
	my $bin = basename $0;
	print STDERR <<EOH;

Usage: $bin [options] DIRS*

  -time    STRING time for each cluster job [ $time ]
  -base    STRING subdirectory to look in for bam files
  -P       STRING qsub -P option, sge accounting project
  
  DIRS*    GLOB   set of directory names to process

EOH
	exit;
}
if ( $help || ( !@ARGV && ! defined $config_file ) ) {
	usage();
}

my $qs = "qsub -terse -cwd -b yes -now no -j yes -m as -M eoberortner\@lbl.gov -w e -l ram.c=700M,h_rt=$time,disk.c=5G -pe pe_slots 2 ";

my $project_opt = defined $sge_project ? " -P $sge_project " : '';
my $script      = "run_slow_depth_${$}";
my $i           = 1;
my $skipped     = 0;

my @dir_list = grep { -d } @ARGV;
if( $config_file ) { 
	@dir_list = ru_add_dirs_from_config_file( $config_file, @dir_list );
}  

for my $dir ( @dir_list ) {
	my $project = basename $dir;
	$dir =~ s/\/$//;    # trailing slashes displease the senses
	if ( !-e "$dir/$base_dir/$project.bam" ) {
		print STDERR "SKIPPING: $dir no bam at $dir/$base_dir/$project.bam\n";
		next;
	}

	my $bam = "$dir/$base_dir/$project.bam";

	my $config = GT::Config->new();
	$config->load("$dir/$base_dir/config.yml");

	if ( !exists $config->{ref_fasta} ) {
		warn "SKIPPING: $project ( $dir ), no ref_fasta found in config.yml";
		next;
	}
	if ( ! exists $config->{ref_faidx} ) {
		$config->{ref_faidx} = "$config->{ref_fasta}.fai";
	}

	my $depth_file = "$bam.depth";
	my @cmds       = ();

	push @cmds, "bam_depth -out $depth_file $bam";
	push @cmds, "depth_to_wiggle -in $depth_file.gz -gzip -out $depth_file.wig.gz";

	for my $depth ( qw/ 3 15 30 / ) {
		my $under_file    = "$depth_file.under.$depth";
		push @cmds, "depth_as_ranges -under  $depth $depth_file.gz > $under_file";
		push @cmds, "depth_collapse_ranges $under_file > $under_file.collapsed";
		push @cmds, "depth_of_coverage $config->{ref_faidx} $under_file.collapsed > $under_file.collapsed.summary";
	}

	write_array_cmds( \@cmds, $i++, $script );

}

if ( --$i ) {
	write_array_run_script("$script.sh");
	my $cmd = "$qs -t 1-$i $project_opt -N slow_depth ./$script.sh ";
	print "cmd=$cmd\n";

	#my $jid;
	my $jid = `$cmd`;
	if ($?) {
		warn "ERROR: with qsub( got $jid in response -- $?)";
	}
	else {
		print "$jid\n";
	}
}
