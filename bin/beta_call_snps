#!/usr/bin/env perl
use Modern::Perl;
use File::Basename;
use Cwd qw/getcwd realpath/;
use Getopt::Long qw(:config no_ignore_case );
use GT::Clutils;
use GT::Config;

umask 2;

#TODO: set -D cutoff to > of 2x avg depth or 100

my ( $align_dir, $lib_file, $sge_project, $config_file, $pipeline_dir, $qsub_time_varcall );

# my $bin_dir = "/global/dna/projectdirs/RD/reseq_store/opt/bin";
# my $bin_dir = "/global/u1/j/j_martin/dev/jel-pipe";

$align_dir         = 'bwa_dir';
$qsub_time_varcall = '08:08:08'; # lucky time

GetOptions(
	'pipedir=s'  => \$pipeline_dir,  # where to check for files.
	'basedir=s' => \$align_dir,
	'Project=s' => \$sge_project,
	'time=s'   => \$qsub_time_varcall,
	'config_file|libfile=s' => \$lib_file,
);

if ( !defined $align_dir || ( !@ARGV && ! ( defined $lib_file && -e $lib_file ) ) ) {
	my $bin = basename $0;
	print STDERR "\n\n$0  -base bwa_dir 201*\n\n";
	print STDERR " -time    STRING  qsub h_rt option for variant calling step [ $qsub_time_varcall ]\n";
	print STDERR " -pipedir DIR     \n";
	print STDERR " -c       FILE    config file / lib file\n";
	print STDERR " -base	  DIR     alignment subdirectory to use [ $align_dir ]\n";
	print STDERR " -P       STRING  sge accounting project name for qsub [ optional ]\n";
	print STDERR "\n";
	exit;
}

my $project_opt = defined $sge_project ? " -P $sge_project " : '';

my @cmds = ();
my %cmds = ();

my $start_dir = realpath(getcwd);
my $script    = "run_var_call_${$}";
# for every directory on the command line do this

#TODO: allow to run from somewhere that isn't cwd

my $dir_pref = defined $pipeline_dir ? realpath( $pipeline_dir ). '/' : '';

my @dir_list = grep { -d } map { "$dir_pref$_" } @ARGV;

if ( $lib_file && -e $lib_file ) {
	my %dir_list = (); 
	my $order    = 1;  
	if ( @dir_list ) {
		for my $dir_temp ( @dir_list ) {
			$dir_list{ $dir_temp } = $order++;
		}
		@dir_list = ();
	}
	open( my $lfh, $lib_file ) or die $!;
	while (<$lfh>) {
		next if ( /^#/ || /^\s*$/ );
		my ( $pmo_info ) = split;
		$dir_list{"$dir_pref$pmo_info"} = $order++ if ( -d "$dir_pref$pmo_info" );
	}
	push @dir_list, sort { $dir_list{ $a } <=> $dir_list{ $b } } keys %dir_list;
}

for my $dir ( @dir_list ) {

	my $i    = 1;
	my $cmd  = '';
	my $proj = basename $dir;

	#
	# if the directory name is formatted 123_456 then assume it's ProposalID_ProjectID
	#

	my $proj_id = $proj =~ /^\d+_(\d+)$/ ? $1 : $proj;

	if ( !-e "$dir/$align_dir" ) {
		warn "SKIPPING $dir -- no $align_dir\n";
		next;
	}
	my $bam = "$proj.bam";
	if ( !-e "$dir/$align_dir/$bam" ) {
		warn "SKIPPING $dir -- no $bam in $dir/$align_dir";
		next;
	}

	chdir "$dir/$align_dir" or die "can't cd to $dir/$align_dir $!";

	my $config = GT::Config->new();
	$config->load();

	my $ref_idx = $config->{ref_fasta};
	$ref_idx .= '.fai';

	my @ref_slices = glob("ref-idx.[0-9]*");
	if ( @ref_slices ) {
		unlink( @ref_slices ) or die "ERROR: can't unlink ref-idx files $!\n@ref_slices\n";
		@ref_slices = ();
	}
	$cmd = "snp_slice_faidx -bed -prefix ref-idx $ref_idx";
	print "cmd: $cmd\n";
	system($cmd ) && die $!;
	@ref_slices = glob("ref-idx.[0-9]*");

	#
	# sort by extension number, just to keep array jobs tidily matched with ctg slices
	#
	my @idx = ();
	for my $idx (@ref_slices) {
		push @idx, $idx =~ /(\d+)$/;
	}

	my @sorted_slices = @ref_slices[ sort { $idx[$a] <=> $idx[$b] } 0 .. $#ref_slices ];

	# sort { ( $a=~/(\d+)$/)[0] <=> ( $b=~/(\d+)$/)[0] } @ref_slices # is the same thing perhaps clearer, but bad sorting practice

	for my $slice (@sorted_slices) {
		my @cmds = ();
		push @cmds, "sam_call_variants -opt-mp \'-C 50 -DS -l $slice\' $config->{ref_fasta} $bam.$slice $bam";
		push @cmds, "bgzip -c $bam.$slice.flt.vcf > $bam.$slice.flt.vcf.gz";
		push @cmds, "tabix -p vcf $bam.$slice.flt.vcf.gz";
		push @cmds, "bcftools index $bam.$slice.raw.bcf";
		write_array_cmds( \@cmds, $i++, $script );
	}
	$i--;
	if ( !$i ) {
		warn "SKIPPING $dir - no tasks\n";
	}
	else {
		write_array_run_script("$script.sh");
		$cmd = "qsub -t 1-$i -terse -cwd -b yes -now no -j yes -m as -M eoberortner\@lbl.gov -w e $project_opt -l ram.c=5G,h_rt=$qsub_time_varcall -pe pe_slots 2 -N vc.$proj_id ./$script.sh ";
		print STDERR "cmd: $cmd\n";
		my $jid = `$cmd`;
		( $jid ) = split /[.]/, $jid;
		chomp $jid;  # if only 1 task in task range the jid is returned as "1234\n" instead of "1234.1\n" or whatever

		$cmd = "qsub -hold_jid $jid  -terse -cwd -b yes -now no -j yes -m as -M eoberortner\@lbl.gov -w e $project_opt -l ram.c=3G,h_rt=02:02:01 -N bs.$proj_id xcf-stitcher -prefix ref-idx -out $bam -gunzip";
		print STDERR "cmd: $cmd\n";
		my $xjid = `$cmd`;
		print "$jid,$xjid\n";

	}

	chdir $start_dir or die "can't cd back to $start_dir\n";

}

__END__

